{"ast":null,"code":"import _objectSpread from \"/home/c-zentrix/Documents/forms/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/c-zentrix/Documents/forms/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/c-zentrix/Documents/forms/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/c-zentrix/Documents/forms/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/c-zentrix/Documents/forms/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/c-zentrix/Documents/forms/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/c-zentrix/Documents/forms/src/FormRender.js\";\nimport React, { Component } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport InputBuilder from \"./InputBuilder\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport checkValidity from \"./Validator\";\nimport dialogProvider from \"./Dialog\";\n\nvar FormRender =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(FormRender, _Component);\n\n  function FormRender(props) {\n    var _this;\n\n    _classCallCheck(this, FormRender);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(FormRender).call(this, props));\n\n    _this.orderHandler = function (event) {\n      event.preventDefault();\n\n      _this.setState({\n        loading: true\n      });\n\n      var formData = {};\n\n      for (var formElementIdentifier in _this.state.sampleForm) {\n        formData[formElementIdentifier] = _this.state.sampleForm[formElementIdentifier].value;\n      }\n\n      dialogProvider.state.open = true;\n      console.log(formData);\n    };\n\n    _this.inputChangedHandler = function (event, inputIdentifier) {\n      //make a copy of sampleForm State\n      var updatedsampleForm = _objectSpread({}, _this.state.sampleForm); // make a copy of Changed Element\n\n\n      var updatedFormElement = _objectSpread({}, updatedsampleForm[inputIdentifier]); //update changed value\n\n\n      updatedFormElement.value = event.target.value; //check validity\n\n      var getValidity = checkValidity(updatedFormElement.value, updatedFormElement.validation);\n      updatedFormElement.valid = getValidity.isValid;\n      updatedFormElement.elementConfig.helperText = getValidity.errorText; //updated element's touched property\n\n      updatedFormElement.touched = true;\n      updatedsampleForm[inputIdentifier] = updatedFormElement; //Checking The whole form Validity\n\n      var formIsValid = true;\n\n      for (var _inputIdentifier in updatedsampleForm) {\n        formIsValid = updatedsampleForm[_inputIdentifier].valid && formIsValid;\n      }\n\n      _this.setState({\n        sampleForm: updatedsampleForm,\n        formIsValid: formIsValid\n      }); //console.log(this.state.sampleForm[inputIdentifier]);\n\n    };\n\n    state = {\n      sampleForm: {\n        name: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"password\",\n            label: \"Emp Id *\",\n            placeholder: \"Your Emp ID\",\n            defaultValue: \"\",\n            helperText: \"\",\n            variant: \"outlined\",\n            margin: \"normal\"\n          },\n          value: \"\",\n          validation: {\n            required: true,\n            minLength: 5\n          },\n          valid: false,\n          touched: false\n        },\n        gender: {\n          elementType: \"radio\",\n          elementConfig: {\n            configs: {\n              name: \"gender\",\n              label: \"Your Gender\",\n              defaultValue: \"male\",\n              color: \"secondary\",\n              margin: \"normal\"\n            },\n            options: [{\n              value: \"male\",\n              label: \"Male\",\n              labelPlacement: \"start\"\n            }, {\n              value: \"female\",\n              label: \"Female\",\n              labelPlacement: \"start\"\n            }, {\n              value: \"other\",\n              label: \"Other\",\n              labelPlacement: \"start\"\n            }]\n          },\n          value: \"female\",\n          validation: {},\n          valid: true,\n          touched: false\n        },\n        street: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"text\",\n            helperText: \"\",\n            label: \"Street\",\n            variant: \"outlined\",\n            margin: \"normal\"\n          },\n          value: \"\",\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        zipCode: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"text\",\n            label: \"Postal Code\",\n            helperText: \"\",\n            variant: \"outlined\",\n            margin: \"normal\"\n          },\n          value: \"\",\n          validation: {\n            required: true,\n            minLength: 5,\n            maxLength: 5\n          },\n          valid: false,\n          touched: false\n        },\n        country: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"text\",\n            label: \"Country\",\n            helperText: \"\",\n            variant: \"outlined\",\n            margin: \"normal\"\n          },\n          value: \"\",\n          validation: {\n            required: true,\n            minLength: 5\n          },\n          valid: false,\n          touched: false\n        },\n        email: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"email\",\n            label: \"E-mail\",\n            helperText: \"\",\n            variant: \"outlined\",\n            margin: \"normal\"\n          },\n          value: \"\",\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        dob: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"date\",\n            label: \"Birthday\",\n            helperText: \"\",\n            variant: \"outlined\",\n            margin: \"normal\",\n            InputLabelProps: {\n              shrink: true\n            }\n          },\n          value: \"\",\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        deliveryMethod: {\n          elementType: \"select\",\n          elementConfig: {\n            options: [{\n              value: \"fastest\",\n              displayValue: \"Fastest\"\n            }, {\n              value: \"cheapest\",\n              displayValue: \"Cheapest\"\n            }],\n            configs: {\n              variant: \"outlined\",\n              margin: \"normal\",\n              label: \"Delivery\",\n              InputLabelProps: {\n                shrink: true\n              },\n              helperText: \"Select Your Delivery Method\"\n            }\n          },\n          value: \"fastest\",\n          validation: {},\n          valid: true\n        }\n      },\n      formIsValid: false,\n      loading: false\n    };\n    return _this;\n  }\n\n  _createClass(FormRender, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var formElementsArray = [];\n\n      for (var key in this.state.sampleForm) {\n        formElementsArray.push({\n          id: key,\n          config: this.state.sampleForm[key]\n        });\n      }\n\n      var form = React.createElement(\"form\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223\n        },\n        __self: this\n      }, formElementsArray.map(function (formElement) {\n        return React.createElement(InputBuilder, {\n          key: formElement.id,\n          touched: formElement.config.touched,\n          errorValue: formElement.config.valid,\n          elementType: formElement.config.elementType,\n          elementConfig: formElement.config.elementConfig,\n          value: formElement.config.value,\n          invalid: !formElement.config.valid,\n          shouldValidate: formElement.config.validation,\n          changed: function changed(event) {\n            return _this2.inputChangedHandler(event, formElement.id);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 225\n          },\n          __self: this\n        });\n      }), React.createElement(Button, {\n        variant: \"contained\",\n        onClick: this.orderHandler,\n        disabled: !this.state.formIsValid,\n        color: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237\n        },\n        __self: this\n      }, \"Send Form\"));\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244\n        },\n        __self: this\n      }, React.createElement(AppBar, {\n        position: \"static\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245\n        },\n        __self: this\n      }, React.createElement(Toolbar, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246\n        },\n        __self: this\n      }, React.createElement(Typography, {\n        variant: \"h5\",\n        color: \"inherit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247\n        },\n        __self: this\n      }, \"Dynamo Form\"))), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252\n        },\n        __self: this\n      }), React.createElement(\"dialogProvider\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254\n        },\n        __self: this\n      }), React.createElement(Grid, {\n        container: true,\n        spacing: 24,\n        justify: \"center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 255\n        },\n        __self: this\n      }, React.createElement(Grid, {\n        item: true,\n        xs: 6,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256\n        },\n        __self: this\n      }, React.createElement(Card, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 257\n        },\n        __self: this\n      }, React.createElement(CardContent, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 258\n        },\n        __self: this\n      }, React.createElement(Typography, {\n        variant: \"h6\",\n        color: \"inherit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 259\n        },\n        __self: this\n      }, \"Enter your Contact Data\"), form)))));\n    }\n  }]);\n\n  return FormRender;\n}(Component);\n\nexport default FormRender;","map":{"version":3,"sources":["/home/c-zentrix/Documents/forms/src/FormRender.js"],"names":["React","Component","Button","AppBar","InputBuilder","Grid","Card","CardContent","Toolbar","Typography","checkValidity","dialogProvider","FormRender","props","orderHandler","event","preventDefault","setState","loading","formData","formElementIdentifier","state","sampleForm","value","open","console","log","inputChangedHandler","inputIdentifier","updatedsampleForm","updatedFormElement","target","getValidity","validation","valid","isValid","elementConfig","helperText","errorText","touched","formIsValid","name","elementType","type","label","placeholder","defaultValue","variant","margin","required","minLength","gender","configs","color","options","labelPlacement","street","zipCode","maxLength","country","email","dob","InputLabelProps","shrink","deliveryMethod","displayValue","formElementsArray","key","push","id","config","form","map","formElement"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport InputBuilder from \"./InputBuilder\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport checkValidity from \"./Validator\";\nimport dialogProvider from \"./Dialog\";\n\nclass FormRender extends Component {\n  constructor(props)\n  {\n    super(props);\n    state = {\n      sampleForm: {\n        name: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"password\",\n            label: \"Emp Id *\",\n            placeholder: \"Your Emp ID\",\n            defaultValue: \"\",\n            helperText: \"\",\n            variant: \"outlined\",\n            margin: \"normal\"\n          },\n          value: \"\",\n          validation: {\n            required: true,\n            minLength: 5\n          },\n          valid: false,\n          touched: false\n        },\n        gender: {\n          elementType: \"radio\",\n          elementConfig: {\n            configs: {\n              name: \"gender\",\n              label: \"Your Gender\",\n              defaultValue: \"male\",\n              color: \"secondary\",\n              margin: \"normal\"\n            },\n            options: [\n              { value: \"male\", label: \"Male\", labelPlacement: \"start\" },\n              { value: \"female\", label: \"Female\", labelPlacement: \"start\" },\n              { value: \"other\", label: \"Other\", labelPlacement: \"start\" }\n            ]\n          },\n          value: \"female\",\n          validation: {},\n          valid: true,\n          touched: false\n        },\n        street: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"text\",\n            helperText: \"\",\n            label: \"Street\",\n            variant: \"outlined\",\n            margin: \"normal\"\n          },\n          value: \"\",\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        zipCode: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"text\",\n            label: \"Postal Code\",\n            helperText: \"\",\n            variant: \"outlined\",\n            margin: \"normal\"\n          },\n          value: \"\",\n          validation: {\n            required: true,\n            minLength: 5,\n            maxLength: 5\n          },\n          valid: false,\n          touched: false\n        },\n        country: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"text\",\n            label: \"Country\",\n            helperText: \"\",\n            variant: \"outlined\",\n            margin: \"normal\"\n          },\n          value: \"\",\n          validation: {\n            required: true,\n            minLength: 5\n          },\n          valid: false,\n          touched: false\n        },\n        email: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"email\",\n            label: \"E-mail\",\n            helperText: \"\",\n            variant: \"outlined\",\n            margin: \"normal\"\n          },\n          value: \"\",\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        dob: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"date\",\n            label: \"Birthday\",\n            helperText: \"\",\n            variant: \"outlined\",\n            margin: \"normal\",\n            InputLabelProps: { shrink: true }\n          },\n          value: \"\",\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        deliveryMethod: {\n          elementType: \"select\",\n          elementConfig: {\n            options: [\n              { value: \"fastest\", displayValue: \"Fastest\" },\n              { value: \"cheapest\", displayValue: \"Cheapest\" }\n            ],\n            configs: {\n              variant: \"outlined\",\n              margin: \"normal\",\n              label: \"Delivery\",\n              InputLabelProps: { shrink: true },\n              helperText: \"Select Your Delivery Method\"\n            }\n          },\n          value: \"fastest\",\n          validation: {},\n          valid: true\n        }\n      },\n      formIsValid: false,\n      loading: false\n    };\n  \n  }\n  \n  orderHandler = event => {\n    event.preventDefault();\n    this.setState({ loading: true });\n    const formData = {};\n    for (let formElementIdentifier in this.state.sampleForm) {\n      formData[formElementIdentifier] = this.state.sampleForm[formElementIdentifier].value;\n    }\n    dialogProvider.state.open = true;\n    console.log(formData);\n   \n  };\n\n  inputChangedHandler = (event, inputIdentifier) => {\n    //make a copy of sampleForm State\n    const updatedsampleForm = {\n      ...this.state.sampleForm\n    };\n    // make a copy of Changed Element\n    const updatedFormElement = {\n      ...updatedsampleForm[inputIdentifier]\n    };\n    //update changed value\n    updatedFormElement.value = event.target.value;\n    //check validity\n    let getValidity = checkValidity(\n      updatedFormElement.value,\n      updatedFormElement.validation\n    );\n\n    updatedFormElement.valid = getValidity.isValid;\n    updatedFormElement.elementConfig.helperText = getValidity.errorText;\n    //updated element's touched property\n    updatedFormElement.touched = true;\n    updatedsampleForm[inputIdentifier] = updatedFormElement;\n\n    //Checking The whole form Validity\n    let formIsValid = true;\n    for (let inputIdentifier in updatedsampleForm) {\n      formIsValid = updatedsampleForm[inputIdentifier].valid && formIsValid;\n    }\n    this.setState({ sampleForm: updatedsampleForm, formIsValid: formIsValid });\n    //console.log(this.state.sampleForm[inputIdentifier]);\n  };\n\n  render() {\n    const formElementsArray = [];\n\n    for (let key in this.state.sampleForm) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.sampleForm[key]\n      });\n    }\n    let form = (\n      <form >\n        {formElementsArray.map(formElement => (\n          <InputBuilder\n            key={formElement.id}\n            touched={formElement.config.touched}\n            errorValue={formElement.config.valid}\n            elementType={formElement.config.elementType}\n            elementConfig={formElement.config.elementConfig}\n            value={formElement.config.value}\n            invalid={!formElement.config.valid}\n            shouldValidate={formElement.config.validation}\n            changed={event => this.inputChangedHandler(event, formElement.id)}\n          />\n        ))}\n        <Button variant=\"contained\" onClick={this.orderHandler} disabled={!this.state.formIsValid} color=\"primary\">\n          Send Form\n        </Button>\n      </form>\n    );\n\n    return (\n      <div>\n        <AppBar position=\"static\">\n          <Toolbar>\n            <Typography variant=\"h5\" color=\"inherit\">\n              Dynamo Form\n            </Typography>\n          </Toolbar>\n        </AppBar>\n        <br />\n        <dialogProvider />\n        <br />\n        <Grid container spacing={24} justify={\"center\"}>\n          <Grid item xs={6}>\n            <Card>\n              <CardContent>\n                <Typography variant=\"h6\" color=\"inherit\">\n                  Enter your Contact Data\n                </Typography>\n                {form}\n              </CardContent>\n            </Card>\n          </Grid>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default FormRender;\n"]},"metadata":{},"sourceType":"module"}