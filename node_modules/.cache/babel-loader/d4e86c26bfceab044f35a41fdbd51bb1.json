{"ast":null,"code":"import _objectSpread from \"/home/c-zentrix/Documents/forms/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/c-zentrix/Documents/forms/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/c-zentrix/Documents/forms/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/c-zentrix/Documents/forms/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/c-zentrix/Documents/forms/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/c-zentrix/Documents/forms/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/c-zentrix/Documents/forms/src/FormRender.js\";\nimport React, { Component } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport InputBuilder from \"./InputBuilder\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport checkValidity from \"./Validator\";\n\nvar FormRender =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(FormRender, _Component);\n\n  function FormRender() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, FormRender);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(FormRender)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      orderForm: {\n        name: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"password\",\n            label: \"Emp Id *\",\n            placeholder: \"Your Emp ID\",\n            defaultValue: \"\",\n            helperText: \"\",\n            variant: \"outlined\",\n            margin: \"normal\"\n          },\n          value: \"\",\n          validation: {\n            required: true,\n            minLength: 5\n          },\n          valid: false,\n          touched: false\n        },\n        gender: {\n          elementType: \"radio\",\n          elementConfig: {\n            configs: {\n              name: \"gender\",\n              label: \"Your Gender\",\n              defaultValue: \"male\",\n              color: \"secondary\",\n              margin: \"normal\"\n            },\n            options: [{\n              value: \"male\",\n              label: \"Male\",\n              labelPlacement: \"start\"\n            }, {\n              value: \"female\",\n              label: \"Female\",\n              labelPlacement: \"start\"\n            }, {\n              value: \"other\",\n              label: \"Other\",\n              labelPlacement: \"start\"\n            }]\n          },\n          value: \"female\",\n          validation: {},\n          valid: false,\n          touched: false\n        },\n        street: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"text\",\n            helperText: \"\",\n            label: \"Street\",\n            variant: \"outlined\",\n            margin: \"normal\"\n          },\n          value: \"\",\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        zipCode: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"text\",\n            label: \"Postal Code\",\n            helperText: \"\",\n            variant: \"outlined\",\n            margin: \"normal\"\n          },\n          value: \"\",\n          validation: {\n            required: true,\n            minLength: 5,\n            maxLength: 5\n          },\n          valid: false,\n          touched: false\n        },\n        country: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"text\",\n            label: \"Country\",\n            helperText: \"\",\n            variant: \"outlined\",\n            margin: \"normal\"\n          },\n          value: \"\",\n          validation: {\n            required: true,\n            minLength: 5\n          },\n          valid: false,\n          touched: false\n        },\n        email: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"email\",\n            label: \"E-mail\",\n            helperText: \"\",\n            variant: \"outlined\",\n            margin: \"normal\"\n          },\n          value: \"\",\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        dob: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"date\",\n            label: \"Birthday\",\n            helperText: \"\",\n            variant: \"outlined\",\n            margin: \"normal\",\n            InputLabelProps: {\n              shrink: true\n            }\n          },\n          value: \"\",\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        deliveryMethod: {\n          elementType: \"select\",\n          elementConfig: {\n            options: [{\n              value: \"fastest\",\n              displayValue: \"Fastest\"\n            }, {\n              value: \"cheapest\",\n              displayValue: \"Cheapest\"\n            }],\n            configs: {\n              variant: \"outlined\",\n              margin: \"normal\",\n              label: \"Delivery\",\n              InputLabelProps: {\n                shrink: true\n              },\n              helperText: \"Select Your Delivery Method\"\n            }\n          },\n          value: \"fastest\",\n          validation: {},\n          valid: true\n        }\n      },\n      formIsValid: false,\n      loading: false\n    };\n\n    _this.orderHandler = function (event) {\n      event.preventDefault();\n\n      _this.setState({\n        loading: true\n      });\n\n      var formData = {};\n\n      for (var formElementIdentifier in _this.state.orderForm) {\n        formData[formElementIdentifier] = _this.state.orderForm[formElementIdentifier].value;\n      }\n\n      var order = {\n        ingredients: _this.props.ingredients,\n        price: _this.props.price,\n        orderData: formData\n      };\n      console.log(order);\n    };\n\n    _this.inputChangedHandler = function (event, inputIdentifier) {\n      //make a copy of orderForm State\n      var updatedOrderForm = _objectSpread({}, _this.state.orderForm); // make a copy of Changed Element\n\n\n      var updatedFormElement = _objectSpread({}, updatedOrderForm[inputIdentifier]); //update changed value\n\n\n      updatedFormElement.value = event.target.value; //check validity\n\n      var getValidity = checkValidity(updatedFormElement.value, updatedFormElement.validation);\n      updatedFormElement.valid = getValidity.isValid;\n      updatedFormElement.elementConfig.helperText = getValidity.errorText; //updated element's touched property\n\n      updatedFormElement.touched = true;\n      updatedOrderForm[inputIdentifier] = updatedFormElement; //Checking The whole form Validity\n\n      var formIsValid = true;\n\n      for (var _inputIdentifier in updatedOrderForm) {\n        formIsValid = updatedOrderForm[_inputIdentifier].valid && formIsValid;\n      }\n\n      _this.setState({\n        orderForm: updatedOrderForm,\n        formIsValid: formIsValid\n      }); //console.log(this.state.orderForm[inputIdentifier]);\n\n    };\n\n    return _this;\n  }\n\n  _createClass(FormRender, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var formElementsArray = [];\n\n      for (var key in this.state.orderForm) {\n        formElementsArray.push({\n          id: key,\n          config: this.state.orderForm[key]\n        });\n      }\n\n      var form = React.createElement(\"form\", {\n        onSubmit: this.orderHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222\n        },\n        __self: this\n      }, formElementsArray.map(function (formElement) {\n        return React.createElement(InputBuilder, {\n          key: formElement.id,\n          touched: formElement.config.touched,\n          errorValue: formElement.config.valid,\n          elementType: formElement.config.elementType,\n          elementConfig: formElement.config.elementConfig,\n          value: formElement.config.value,\n          invalid: !formElement.config.valid,\n          shouldValidate: formElement.config.validation,\n          changed: function changed(event) {\n            return _this2.inputChangedHandler(event, formElement.id);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 224\n          },\n          __self: this\n        });\n      }), React.createElement(Button, {\n        variant: \"contained\",\n        disabled: !this.state.formIsValid,\n        color: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 236\n        },\n        __self: this\n      }, \"Order\"));\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243\n        },\n        __self: this\n      }, React.createElement(AppBar, {\n        position: \"static\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244\n        },\n        __self: this\n      }, React.createElement(Toolbar, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245\n        },\n        __self: this\n      }, React.createElement(Typography, {\n        variant: \"h5\",\n        color: \"inherit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246\n        },\n        __self: this\n      }, \"Dynamo Form\"))), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251\n        },\n        __self: this\n      }), JSON.stringify(this.state.formIsValid), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253\n        },\n        __self: this\n      }), React.createElement(Grid, {\n        container: true,\n        spacing: 24,\n        justify: \"center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254\n        },\n        __self: this\n      }, React.createElement(Grid, {\n        item: true,\n        xs: 6,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 255\n        },\n        __self: this\n      }, React.createElement(Card, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256\n        },\n        __self: this\n      }, React.createElement(CardContent, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 257\n        },\n        __self: this\n      }, React.createElement(Typography, {\n        variant: \"h6\",\n        color: \"inherit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 258\n        },\n        __self: this\n      }, \"Enter your Contact Data\"), form)))));\n    }\n  }]);\n\n  return FormRender;\n}(Component);\n\nexport default FormRender;","map":{"version":3,"sources":["/home/c-zentrix/Documents/forms/src/FormRender.js"],"names":["React","Component","Button","AppBar","InputBuilder","Grid","Card","CardContent","Toolbar","Typography","checkValidity","FormRender","state","orderForm","name","elementType","elementConfig","type","label","placeholder","defaultValue","helperText","variant","margin","value","validation","required","minLength","valid","touched","gender","configs","color","options","labelPlacement","street","zipCode","maxLength","country","email","dob","InputLabelProps","shrink","deliveryMethod","displayValue","formIsValid","loading","orderHandler","event","preventDefault","setState","formData","formElementIdentifier","order","ingredients","props","price","orderData","console","log","inputChangedHandler","inputIdentifier","updatedOrderForm","updatedFormElement","target","getValidity","isValid","errorText","formElementsArray","key","push","id","config","form","map","formElement","JSON","stringify"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport InputBuilder from \"./InputBuilder\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport checkValidity from \"./Validator\";\n\nclass FormRender extends Component {\n  state = {\n    orderForm: {\n      name: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"password\",\n          label: \"Emp Id *\",\n          placeholder: \"Your Emp ID\",\n          defaultValue: \"\",\n          helperText: \"\",\n          variant: \"outlined\",\n          margin: \"normal\"\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          minLength: 5\n        },\n        valid: false,\n        touched: false\n      },\n      gender: {\n        elementType: \"radio\",\n        elementConfig: {\n          configs: {\n            name: \"gender\",\n            label: \"Your Gender\",\n            defaultValue: \"male\",\n            color: \"secondary\",\n            margin: \"normal\"\n          },\n          options: [\n            { value: \"male\", label: \"Male\", labelPlacement: \"start\" },\n            { value: \"female\", label: \"Female\", labelPlacement: \"start\" },\n            { value: \"other\", label: \"Other\", labelPlacement: \"start\" }\n          ]\n        },\n        value: \"female\",\n        validation: {},\n        valid: false,\n        touched: false\n      },\n      street: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"text\",\n          helperText: \"\",\n          label: \"Street\",\n          variant: \"outlined\",\n          margin: \"normal\"\n        },\n        value: \"\",\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false\n      },\n      zipCode: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"text\",\n          label: \"Postal Code\",\n          helperText: \"\",\n          variant: \"outlined\",\n          margin: \"normal\"\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          minLength: 5,\n          maxLength: 5\n        },\n        valid: false,\n        touched: false\n      },\n      country: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"text\",\n          label: \"Country\",\n          helperText: \"\",\n          variant: \"outlined\",\n          margin: \"normal\"\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          minLength: 5\n        },\n        valid: false,\n        touched: false\n      },\n      email: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"email\",\n          label: \"E-mail\",\n          helperText: \"\",\n          variant: \"outlined\",\n          margin: \"normal\"\n        },\n        value: \"\",\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false\n      },\n      dob: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"date\",\n          label: \"Birthday\",\n          helperText: \"\",\n          variant: \"outlined\",\n          margin: \"normal\",\n          InputLabelProps: { shrink: true }\n        },\n        value: \"\",\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false\n      },\n      deliveryMethod: {\n        elementType: \"select\",\n        elementConfig: {\n          options: [\n            { value: \"fastest\", displayValue: \"Fastest\" },\n            { value: \"cheapest\", displayValue: \"Cheapest\" }\n          ],\n          configs: {\n            variant: \"outlined\",\n            margin: \"normal\",\n            label: \"Delivery\",\n            InputLabelProps: { shrink: true },\n            helperText: \"Select Your Delivery Method\"\n          }\n        },\n        value: \"fastest\",\n        validation: {},\n        valid: true\n      }\n    },\n    formIsValid: false,\n    loading: false\n  };\n\n  orderHandler = event => {\n    event.preventDefault();\n    this.setState({ loading: true });\n    const formData = {};\n    for (let formElementIdentifier in this.state.orderForm) {\n      formData[formElementIdentifier] = this.state.orderForm[\n        formElementIdentifier\n      ].value;\n    }\n    const order = {\n      ingredients: this.props.ingredients,\n      price: this.props.price,\n      orderData: formData\n    };\n    console.log(order);\n  };\n\n  inputChangedHandler = (event, inputIdentifier) => {\n    //make a copy of orderForm State\n    const updatedOrderForm = {\n      ...this.state.orderForm\n    };\n    // make a copy of Changed Element\n    const updatedFormElement = {\n      ...updatedOrderForm[inputIdentifier]\n    };\n    //update changed value\n    updatedFormElement.value = event.target.value;\n    //check validity\n    let getValidity = checkValidity(\n      updatedFormElement.value,\n      updatedFormElement.validation\n    );\n\n    updatedFormElement.valid = getValidity.isValid;\n    updatedFormElement.elementConfig.helperText = getValidity.errorText;\n    //updated element's touched property\n    updatedFormElement.touched = true;\n    updatedOrderForm[inputIdentifier] = updatedFormElement;\n\n    //Checking The whole form Validity\n    let formIsValid = true;\n    for (let inputIdentifier in updatedOrderForm) {\n      formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n    }\n    this.setState({ orderForm: updatedOrderForm, formIsValid: formIsValid });\n    //console.log(this.state.orderForm[inputIdentifier]);\n  };\n\n  render() {\n    const formElementsArray = [];\n\n    for (let key in this.state.orderForm) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.orderForm[key]\n      });\n    }\n    let form = (\n      <form onSubmit={this.orderHandler}>\n        {formElementsArray.map(formElement => (\n          <InputBuilder\n            key={formElement.id}\n            touched={formElement.config.touched}\n            errorValue={formElement.config.valid}\n            elementType={formElement.config.elementType}\n            elementConfig={formElement.config.elementConfig}\n            value={formElement.config.value}\n            invalid={!formElement.config.valid}\n            shouldValidate={formElement.config.validation}\n            changed={event => this.inputChangedHandler(event, formElement.id)}\n          />\n        ))}\n        <Button variant=\"contained\" disabled={!this.state.formIsValid} color=\"primary\">\n          Order \n        </Button>\n      </form>\n    );\n\n    return (\n      <div>\n        <AppBar position=\"static\">\n          <Toolbar>\n            <Typography variant=\"h5\" color=\"inherit\">\n              Dynamo Form\n            </Typography>\n          </Toolbar>\n        </AppBar>\n        <br />\n        {JSON.stringify(this.state.formIsValid)}\n        <br />\n        <Grid container spacing={24} justify={\"center\"}>\n          <Grid item xs={6}>\n            <Card>\n              <CardContent>\n                <Typography variant=\"h6\" color=\"inherit\">\n                  Enter your Contact Data\n                </Typography>\n                {form}\n              </CardContent>\n            </Card>\n          </Grid>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default FormRender;\n"]},"metadata":{},"sourceType":"module"}